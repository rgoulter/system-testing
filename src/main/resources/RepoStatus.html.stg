delimiters "$", "$"

//
// TCR
//

// 'name' expected to be like "sleek --args /path/to/file.slk"
tcrPassing(name) ::= <<
$name$ <span class="tcr pass">Passed</span><br/>
>>

// ENHANCEMENT: Colors for exp, act.
tcrFailing(name, expected, actual) ::= <<
$name$ <span class="tcr fail">Failed</span><br/>
$expected, actual:{exp,act|Expected $exp$ but got $act$.<br/>
}$
>>

tcrInvalid(name, output) ::= <<
$name$ <span class="tcr invalid">Invalid</span><br/>
$output$
>>


//
// TSR
//

tsrSummary(totalCt, passedCt, failedCt, invalidCt) ::= <<
<br/>
Summary<br/>

<span class="tsrSummary">
  <span>Total number of tests: <b class="tsrTotal">$totalCt$</b><br/></span>
  <span>Total number of tests passed: <b class="tsrTotalPassed pass">$passedCt$</b><br/></span>
  <span>Total number of tests failed: <b class="tsrTotalFailed fail">$failedCt$</b><br/></span>
  <span>Total number of tests invalid: <b class="tsrTotalInvalid invalid">$invalidCt$</b><br/></span>
</span>
>>


//
// TS Cmp / Diff
//

// could use <li/> here?
// ENHANCEMENT: Colors for items.
diffList(name, ls) ::= <<
$if(!ls.empty)$
$name$:<br/>
$ls:{it|$it$<br/>
}$
$endif$
>>

// * skip the add/rm tests, args changed (for now)
// * another simplification: all as array-of-string.
tsrCmp(name, oldRev, curRev, nowValid, nowInvalid, nowPasses, nowFails, diffDiffs, nowSlower, nowQuicker) ::= <<
<b>Diff Between $oldRev$ to $curRev$</b><br/>

$diffList("Now Valid", nowValid)$
$diffList("Now Invalid", nowInvalid)$
$diffList("Now Passes", nowPasses)$
$diffList("Now Fails", nowFails)$
$diffList("Still Fails, Different Diffs", diffDiffs)$
$diffList("Now Slower", nowSlower)$
$diffList("Now Quicker", nowQuicker)$
>>


//
// Branch
//


branchInfo(name, rev, age, branchedFrom) ::= <<
>>

branchesToC(names, revs, ages, branchedFroms) ::= <<
<table>
  <tr><td>Name</td><td>Revision</td><td>Age</td><td>Branched From</td></tr>
  $names,revs,ages,branchedFroms:{name,rev,age,branchedFrom|<tr><td>$name$</td><td>$rev$</td><td>$age$</td><td>$branchedFrom$</td></tr>
}$
</table>
>>


lines(arr) ::= <<
$arr:{line|$line$<br/>
}$
>>

// classnames here must match those used in `page`.
conciseText(short, long, count) ::= <<
<div class="conciseText">
  <div class="shortText visible">
    $lines(short)$
    <p>[<a href="#">Show</a> ($count$ more lines)]</p>
  </div>
  <div class="expandedText hide">
    $lines(long)$
    <p>[<a href="#">Hide</a>]</p>
  </div>
</div>
>>


page(content) ::= <<
<html>
  <head>
    <style type="text/css">
      .hide { display: none; }
    </style>

    <script type="text/javascript">
    //<![CDATA[

    function init() {
      // Initialise conciseText show/hide
      var conciseTexts = document.getElementsByClassName("conciseText")
      for (var i = 0; i < conciseTexts.length; i++) {
        var ct = conciseTexts[i];
        var h2 = ct.getElementsByTagName("a")

        for (var j = 0; j < h2.length; j++) {
          h2[j].onclick = toggleConciseTextItem;
        }
      }
    }

    function toggleConciseTextItem() {
      // this gets annoying;
      // look at parentNode's parentNode (conciseText),
      // then switch which div has 'hide'.
      var conciseTextDiv = this.parentNode.parentNode.parentNode;

      var wasVis = conciseTextDiv.getElementsByClassName("visible")[0]
      var wasHid = conciseTextDiv.getElementsByClassName("hide")[0]

      wasVis.classList.add("hide")
      wasVis.classList.remove("visible")

      wasHid.classList.add("visible")
      wasHid.classList.remove("hide")
    }

     //]]>
    </script>
  </head>
  <body onload="init()">
  $content$
  </body>
</html>
>>