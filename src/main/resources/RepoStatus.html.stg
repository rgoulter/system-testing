delimiters "$", "$"

//
// TCR
//

// 'name' expected to be like "sleek --args /path/to/file.slk"
tcrPassing(name) ::= <<
<span class="tcr header">
  <span class="tcr name">$name$</span><span class="tcr result pass">Passed</span><br class="tcr" />
</span>
>>

// ENHANCEMENT: Colors for exp, act.
tcrFailing(name, expected, actual, key) ::= <<
<span class="tcr header">
  <span class="tcr name">$name$</span><span class="tcr result fail">Failed</span><br class="tcr" />
</span>
$expected, actual, key:{exp,act,k|Expected <span class="diffExpected">$exp$</span> but got <span class="diffActual">$act$</span> for $k$.<br/>
}$
>>

tcrInvalid(name, output) ::= <<
<span class="tcr header">
  <span class="tcr name">$name$</span><span class="tcr result invalid">Invalid</span><br class="tcr" />
</span>
$output$
>>


//
// TSR
//

tsrSummary(totalCt, passedCt, failedCt, invalidCt) ::= <<
<h4>Summary</h4>

<span class="tsrSummary">
  <span>Total number of tests: <b class="tsrTotal">$totalCt$</b><br/></span>
  <span>Total number of tests passed: <b class="tsrTotalPassed pass">$passedCt$</b><br/></span>
  <span>Total number of tests failed: <b class="tsrTotalFailed fail">$failedCt$</b><br/></span>
  <span>Total number of tests invalid: <b class="tsrTotalInvalid invalid">$invalidCt$</b><br/></span>
</span>
>>


//
// TS Cmp / Diff
//

// could use <li/> here?
// ENHANCEMENT: Colors for items.
diffList(name, ls) ::= <<
$if(!ls.empty)$
<h5>$name$:</h5>
<ul>
$ls:{it|<li>$it$</li>
}$
</ul>
$endif$
>>

// * skip the add/rm tests, args changed (for now)
// * another simplification: all as array-of-string.
tsrCmp(name, oldRev, curRev, nowValid, nowInvalid, nowPasses, nowFails, diffDiffs, nowSlower, nowQuicker) ::= <<
<h4>Diff Between $oldRev$ to $curRev$</h4>

$diffList("Now Valid", nowValid)$
$diffList("Now Invalid", nowInvalid)$
$diffList("Now Passes", nowPasses)$
$diffList("Now Fails", nowFails)$
$diffList("Still Fails, Different Diffs", diffDiffs)$
$diffList("Now Slower", nowSlower)$
$diffList("Now Quicker", nowQuicker)$
>>

tsr(title,tcrsHTML,summary) ::= <<
<div class="tsr">
  <h3>$title$<span class="hide">...</span></h3>
  <div class="tcrs visible">
    $tcrsHTML$
  </div>
  $summary$
</div>
>>


//
// Branch
//


branchInfo(name, rev, age, branchedFrom) ::= <<
>>

branchesToC(names, revs, ages, branchedFroms) ::= <<
<table>
  <tr><td>Name</td><td>Revision</td><td>Age</td><td>Branched From</td></tr>
  $names,revs,ages,branchedFroms:{name,rev,age,branchedFrom|<tr><td>$name$</td><td>$rev$</td><td>$age$</td><td>$branchedFrom$</td></tr>
}$
</table>
>>


lines(arr) ::= <<
$arr:{line|$line$<br/>
}$
>>

// classnames here must match those used in `page`.
conciseText(short, long, count) ::= <<
<div class="conciseText">
  <div class="shortText visible">
    $lines(short)$
    <p>[<a>Show</a> ($count$ more lines)]</p>
  </div>
  <div class="expandedText hide">
    $lines(long)$
    <p>[<a>Hide</a>]</p>
  </div>
</div>
>>


page(content) ::= <<
<html>
  <head>
    <style type="text/css">
      .pass { color: darkgreen; }
      .fail { color: red; }
      .invalid { color: red; }

      .diffExpected { color: darkcyan; }
      .diffActual { color: darkmagenta; }

      div.tcrs { width: 800px; }

      /* use monospace to distinguish name */
      span.tcr.name { background-color: lightgrey; font-family: "Lucida Console", Monaco, monospace; float: left; }
      span.tcr.result { float: right; }
      br.tcr { clear: both; }

      .hide { display: none; }
    </style>

    <script type="text/javascript">
    //<![CDATA[

    function init() {
      // Initialise conciseText show/hide
      var conciseTexts = document.getElementsByClassName("conciseText");
      for (var i = 0; i < conciseTexts.length; i++) {
        var ct = conciseTexts[i];
        var h2 = ct.getElementsByTagName("a");

        for (var j = 0; j < h2.length; j++) {
          h2[j].onclick = toggleConciseTextItem;
        }
      }

      var tsrDivs = document.getElementsByClassName("tsr");
      for (var i = 0; i < tsrDivs.length; i++) {
        var tsrDiv = tsrDivs[i];
        var h3 = tsrDiv.getElementsByTagName("h3")[0];

        h3.onclick = toggleTCRs;
      }
    }

    function toggleConciseTextItem() {
      // this gets annoying;
      // look at parentNode's parentNode (conciseText),
      // then switch which div has 'hide'.
      var conciseTextDiv = this.parentNode.parentNode.parentNode;

      var wasVis = conciseTextDiv.getElementsByClassName("visible")[0]
      var wasHid = conciseTextDiv.getElementsByClassName("hide")[0]

      wasVis.classList.add("hide")
      wasVis.classList.remove("visible")

      wasHid.classList.add("visible")
      wasHid.classList.remove("hide")
    }

    function toggleTCRs() {
      // tsrDiv is h3's parent
      var tsrDiv = this.parentNode;

      var wasVis = tsrDiv.getElementsByClassName("visible")[0]
      var wasHid = tsrDiv.getElementsByClassName("hide")[0]

      wasVis.classList.add("hide")
      wasVis.classList.remove("visible")

      wasHid.classList.add("visible")
      wasHid.classList.remove("hide")
    }

     //]]>
    </script>
  </head>
  <body onload="init()">
  $content$
  </body>
</html>
>>
